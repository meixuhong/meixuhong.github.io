<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>WSL Ubuntu 18.04上使用pipenv的4个关键点</title>
    <url>//4-points-need-to-be-noticed-about-pipenv-usage-in-wsl-ubuntu-18.04.html</url>
    <content><![CDATA[<blockquote>
<p>自从MicroSoft拥抱Linux以来，除了微软股票大涨以外，其开源动作更是不断，VScode俨然已成为最流行的开源IDE/文本编辑器，WSL更像是王炸，从此大家再也不需要安装双系统了吧。本文简要总结安装WSL Ubuntu 18.04后，pipenv的基本使用笔记。</p>
</blockquote>
<h2 id="1-Pipenv的常见命令"><a href="#1-Pipenv的常见命令" class="headerlink" title="1.Pipenv的常见命令"></a>1.Pipenv的常见命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pipenv install  # 安装虚拟环境 ，如果工程目录下有Pipfile则会自动安装，如果没有则会先生成Pipfile</span><br><span class="line">pipenv shell    # 进入虚拟环境</span><br><span class="line">exit            # 退出虚拟环境</span><br><span class="line">pipenv --rm     # 删除整个环境  不会删除pipfile</span><br><span class="line">pipenv -h 	    # 查看帮助</span><br><span class="line">pipenv install requests==2.13.0 #安装指定版本包</span><br></pre></td></tr></table></figure>

<h2 id="2-以root账号执行profile使环境变量生效"><a href="#2-以root账号执行profile使环境变量生效" class="headerlink" title="2.以root账号执行profile使环境变量生效"></a>2.以root账号执行profile使环境变量生效</h2><p>使用WSL基本都是没有使用<code>bash --login</code>的，这就导致基本环境变量没有加载，需要我们手动加载使环境变量生效。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo -s</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">source</span> ~/.profile</span></span><br></pre></td></tr></table></figure>

<p>否则会出现找不到<code>pipenv</code>,参考自<a href="https://superuser.com/questions/1432768/how-to-properly-install-pipenv-on-wsl-ubuntu-18-04">superuser</a>。</p>
<h2 id="3-修改项目的Pipfile中的url为国内镜像地址"><a href="#3-修改项目的Pipfile中的url为国内镜像地址" class="headerlink" title="3.修改项目的Pipfile中的url为国内镜像地址"></a>3.修改项目的Pipfile中的url为国内镜像地址</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[[source]]</span><br><span class="line">name = &quot;pypi&quot;</span><br><span class="line">url = &quot;https://repo.huaweicloud.com/repository/pypi/simple&quot;</span><br><span class="line">verify_ssl = true</span><br><span class="line"></span><br><span class="line">[dev-packages]</span><br><span class="line"></span><br><span class="line">[packages]</span><br><span class="line"></span><br><span class="line">[requires]</span><br><span class="line">python_version = &quot;3.6&quot;</span><br></pre></td></tr></table></figure>

<p>url可以修改为华为镜像<a href="https://repo.huaweicloud.com/repository/pypi/simple%EF%BC%8C%E6%88%96%E8%80%85%E9%98%BF%E9%87%8C%E9%95%9C%E5%83%8Fhttps://mirrors.aliyun.com/pypi/simple%E3%80%82">https://repo.huaweicloud.com/repository/pypi/simple，或者阿里镜像https://mirrors.aliyun.com/pypi/simple。</a></p>
<p>或者，在环境变量中指定源，这样可以一劳永逸的解决镜像问题。</p>
<p>在<code>用户环境变量文件(~/.bash_profile，或者~/.profile)</code>或者<code>系统环境变量文件(/etc/profile)</code>中添加都行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PIPENV_TEST_INDEX=https://repo.huaweicloud.com/repository/pypi/simple</span><br><span class="line">export PATH=$PIPENV_TEST_INDEX:$PATH</span><br></pre></td></tr></table></figure>

<p>编辑完成之后，执行<code>source ~/.profile</code>生效环境变量。</p>
<h2 id="4-修改Pipenv的虚拟环境的默认生成目录"><a href="#4-修改Pipenv的虚拟环境的默认生成目录" class="headerlink" title="4.修改Pipenv的虚拟环境的默认生成目录"></a>4.修改Pipenv的虚拟环境的默认生成目录</h2><p>共有三种方法：</p>
<ol>
<li><code>export PIPENV_VENV_IN_PROJECT=1</code> 设置这个环境变量，pipenv会在当前目录下创建.venv的目录，以后都会把模块装到这个.venv下。</li>
<li>自己在项目目录下手动创建.venv的目录，然后运行 <code>pipenv run</code> 或者 <code>pipenv shell </code>pipenv都会在.venv下创建虚拟环境。</li>
<li>设置<code>WORKON_HOME</code>到其他的地方 （<strong>如果当前目录下已经有.venv,此项设置失效</strong>）</li>
</ol>
<p>我喜欢通过设置<code>WORKON_HOME</code>到指定目录，在<code>~/.profile</code>下增加环境变量：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export WORKON_HOME=/home/laomei/pipenv_home</span><br><span class="line">export PATH=$WORKON_HOME:$PATH</span><br></pre></td></tr></table></figure>

<p>然后生效环境变量<code>source ~/.profile</code>即可。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>WSL</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>使用GitHub与Gitbook制作自己的书籍</title>
    <url>//create-ebook-with-github-and-gitbook.html</url>
    <content><![CDATA[<p>最近在学习网络爬虫知识，经常需要做笔记，有几个选择。</p>
<ul>
<li>Hexo博客记录：还是不太喜欢这种定制化过高的博客，等有时间了再来自己折腾一个出来，Pass。</li>
<li>有道笔记：还算是好用，但是每次记录或者查询的时候都要登录显得不是那么方便，Pass。</li>
<li>GitHub：可以在任意地方查阅与修改，是很方便，但是网页形势浏览不是很方便，Pass。</li>
<li>Gitbook：可以在任意地方查阅与修改，web界面式浏览，很方便，就是它了。</li>
</ul>
<p>如果将Gitbook与GitHub结合起来，即是将<code>Book(笔记)</code>与GitHub中的<code>Repository</code>绑定起来，这样便可以在任意地方通过<code>Git</code>拉取仓库，修改内容，提交内容，GitBook会自动从GitHub中同步<code>Book(笔记)</code>。</p>
<h1 id="1-gitbook生成本地书籍"><a href="#1-gitbook生成本地书籍" class="headerlink" title="1.gitbook生成本地书籍"></a>1.gitbook生成本地书籍</h1><h2 id="1-1-安装gitbook"><a href="#1-1-安装gitbook" class="headerlink" title="1.1 安装gitbook"></a>1.1 安装gitbook</h2><p>gitbook依赖<code>nodejs</code>，安装完成之后安装<code>gitbook</code>.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node --version</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm -v</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install gitbook-cli -g</span></span><br></pre></td></tr></table></figure>

<h2 id="1-2-初始化book"><a href="#1-2-初始化book" class="headerlink" title="1.2 初始化book"></a>1.2 初始化book</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gitbook init <span class="comment">#会在当前目录生成两个文件， README.md和SUMMARY.md</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitbook serve <span class="comment">#编译和预览书籍，实际上会首先调用 gitbook build 编译书籍,然后打开web服务器</span></span></span><br></pre></td></tr></table></figure>

<p><code>gitbook init</code>会在当前目录生成两个文件。</p>
<ul>
<li>README.md: 简介文档。</li>
<li>SUMMARY.md: 定义了book的<strong>目录结构，非常重要</strong>。</li>
</ul>
<p><code>gitbook serve</code>命令会调用<code>gitbook build</code>在本地生成一个<code>_book</code>目录，这个目录就是一个静态站点，打开里面的<strong>index.html</strong>就可以访问本地book了。</p>
<h2 id="1-3-在个人站点调用Book"><a href="#1-3-在个人站点调用Book" class="headerlink" title="1.3 在个人站点调用Book"></a>1.3 在个人站点调用Book</h2><p>如果有个人站点，需要连接一个gitbook书籍，非常简单，只需要把上面通过<code>gitbook build</code>生成的<code>_book</code>目录放入相应位置即可，以Hexo为例。</p>
<p>我们知道发布Hexo博客有如下几个步骤。</p>
<ul>
<li>hexo clean: 清除cache文件。</li>
<li>hexo g: 生成public文件，即Hexo站点静态文件。</li>
<li>hexo d: 发布public站点到github或者其他托管站点。</li>
</ul>
<p>我们只需要在<code>hexo g</code>命令执行完之后拷贝Gitbook的<code>_book</code>内容到Hexo的<code>public</code>目录，然后再执行<code>Hexo d</code>发布站点即可，访问Hexo站点的时候访问书籍的话通过网址：<code>xxx.github.io/_book</code>,浏览器就会自动调用该目录下的<code>index.html</code>文件。也可以尝试将下述命令做成可执行脚本直接运行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; cp -fr ../[path]/_book/ public/ &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<h1 id="2-发布Book到GitBook-com"><a href="#2-发布Book到GitBook-com" class="headerlink" title="2. 发布Book到GitBook.com"></a>2. 发布Book到GitBook.com</h1><h2 id="2-1-在Github中创建一个新的仓库"><a href="#2-1-在Github中创建一个新的仓库" class="headerlink" title="2.1. 在Github中创建一个新的仓库"></a>2.1. 在Github中创建一个新的仓库</h2><p>如果没有Github账号则新创建一个，然后创建一个新的仓库如，<code>ebook</code></p>
<h2 id="2-2-在GitBook中注册一个新的账号"><a href="#2-2-在GitBook中注册一个新的账号" class="headerlink" title="2.2. 在GitBook中注册一个新的账号"></a>2.2. 在GitBook中注册一个新的账号</h2><p>新版本<a href="https://gitbook.com/">Gitbook</a>注册后需要创建一个<code>organization</code>，为便于记忆，填写为个人名字即可。依照提示继续填入<code>project</code>,在<code>project</code>里面可以创建多个<code>space</code>，每个<code>space</code>便是一本书。</p>
<h2 id="2-3-绑定Gitbook与GitHub仓库"><a href="#2-3-绑定Gitbook与GitHub仓库" class="headerlink" title="2.3. 绑定Gitbook与GitHub仓库"></a>2.3. 绑定Gitbook与GitHub仓库</h2><ul>
<li>首先需要将Gitbook账号与GitHub账号进行绑定</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/Gitbook-Github.jpg" alt="gitbook"></p>
<ul>
<li><p>关联账号后可以将书籍与仓库进行绑定关联</p>
<p>进入<code>Space</code>后点击<strong>设置</strong>按钮进行关联前面创建的仓库<code>ebook</code></p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/Gitbook_integration.jpg" alt="gitbook"></p>
<h2 id="2-4-通过Git更新书籍"><a href="#2-4-通过Git更新书籍" class="headerlink" title="2.4. 通过Git更新书籍"></a>2.4. 通过Git更新书籍</h2><h3 id="2-4-1-获取到git地址拷贝到本地"><a href="#2-4-1-获取到git地址拷贝到本地" class="headerlink" title="2.4.1 获取到git地址拷贝到本地"></a>2.4.1 获取到<code>git</code>地址拷贝到本地</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:wowmarcomei/ebook.git</span><br></pre></td></tr></table></figure>

<h3 id="2-4-2-添加readme-md与summary-md内容"><a href="#2-4-2-添加readme-md与summary-md内容" class="headerlink" title="2.4.2 添加readme.md与summary.md内容"></a>2.4.2 添加<code>readme.md</code>与<code>summary.md</code>内容</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitbook init #生成README.md与SUMMARY.md</span><br><span class="line">vi README.md #编辑README.md</span><br><span class="line">vi SUAMMRY.md #这一步尤其重要，因为需要通过这个文件指定书籍的文档结构</span><br><span class="line">git add *</span><br><span class="line">git commit -m &quot;Initial Commit&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<p>即可将写好的<code>readme</code>内容推送到Github，Gitbook也会同步从Github中获取到数据。</p>
<h3 id="2-4-3-编辑内容并推送到托管仓库"><a href="#2-4-3-编辑内容并推送到托管仓库" class="headerlink" title="2.4.3 编辑内容并推送到托管仓库"></a>2.4.3 编辑内容并推送到托管仓库</h3><ul>
<li>创建新章节：创建一个目录。</li>
<li>章节中的小章节：对应一个Markdown文件。</li>
<li>如果需要对章节进行多层嵌套，则嵌套创建目录即可。</li>
<li>编辑<code>SUMMARY.md</code>文件指定结构。</li>
</ul>
<p>示例，新增一个章节，在里面指定对应小节：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir 1.爬虫准备</span><br><span class="line">vi 1.常见的三种数据库的安装配置.md</span><br><span class="line">vi 2.Python常用库的安装.md</span><br><span class="line">vi 3.使用Python的正则表达式过滤字符串.md</span><br><span class="line">vi 4.理解Python中使用yield进行迭代.md</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##编辑完内容后编辑SUMMARY.md文件指定目录结构</span></span></span><br></pre></td></tr></table></figure>

<p>上述是使用vi命令编辑Markdown文件，实际上更推荐使用一些可视化的工作编辑，比如<code>typora</code>等等。</p>
<p><code>SUMMARY.md</code>格式如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Summary</span></span><br><span class="line"></span><br><span class="line">* [Introduction](README.md)</span><br><span class="line">* [1.准备工作](1.准备工作/README.md)</span><br><span class="line">	* [1.常见的三种数据库的安装配置](1.准备工作/1.常见的三种数据库的安装配置.md)</span><br><span class="line">	* [2.Python常用库的安装](1.准备工作/2.Python常用库的安装.md)</span><br><span class="line">	* [3.使用Python的正则表达式过滤字符串](1.准备工作/3.使用Python的正则表达式过滤字符串.md)</span><br><span class="line">	* [4.理解Python中使用yield进行迭代](1.准备工作/4.理解Python中使用yield进行迭代.md)</span><br><span class="line">		* [1.爬虫基本流程](2.理解爬虫/1.爬虫基本流程.md)</span><br><span class="line">		* [2.Python使用Urllib库爬取数据](2.理解爬虫/2.Python使用Urllib库爬取数据.md)</span><br></pre></td></tr></table></figure>

<p>即为<code>[]()</code>构成的列表，如果需要嵌套层级，相比上一个层级多缩进一下即可，上面的例子中就有三个层级。</p>
<p><img src="https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/Gitbook-Structure.jpg" alt="gitbook"></p>
<p>完成后通过<code>git</code>推送到<code>github</code>,<code>gitbook.com</code>就会从仓库里自动同步，此时访问gitbook.com即可访问发布的数据。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add *</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&quot;update...&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin master <span class="comment">#推送到master分支，gitbook应该也是绑定到仓库的该分支，否则不能同github同步</span></span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/Gitbook_overview.jpg" alt="gitbook"></p>
<blockquote>
<p><strong>瑕疵</strong>: 新版本的Gitbook中对<code>Markdown</code>的有序列表支持不是很好，原本的列表项<code>1, 2, 3, 4, ... </code>在gitbook中会变成<code>1, 1, 1, 1, ...</code>，目前没看到有解决，所以我们在记录笔记的时候换成无序列表吧，或者换成小标题也行。</p>
</blockquote>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Gitbook</tag>
        <tag>Github</tag>
        <tag>Git</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo搭建Github Page</title>
    <url>//create-github-pages-with-hexo.html</url>
    <content><![CDATA[<blockquote>
<p>Github Pages是Github免费提供的静态网站服务，我们可以将自己的静态网站推送到Github仓库，让它提供网站服务，**免去自己申请主机服务器的困(费)扰(用)**。不过默认对外提供的域名为<code>&lt;username&gt;.github.io</code>，如果希望使用自己的域名如<code>baidu.com</code>，则需要对该域名进行<code>CNAME</code>解析到<code>&lt;username&gt;.github.io</code>.</p>
</blockquote>
<p>在github上可以用户名创建一个repository: <code>&lt;username&gt;.github.io</code>，该仓库即为一个静态页面github page，可以在github上该仓库的设置界面选择主题来设置自己喜欢的<code>theme</code>，也可以通过<code>Hexo</code>来更新整个github page。为了可以在多台电脑上<strong>均可</strong>管理hexo源码与发布github page博客博文，我们需要使用两个分支：<code>master</code> 与 <code>hexo</code>。</p>
<ul>
<li>hexo分支为源代码文件。</li>
<li>master分支为发布的github page静态页面所需的所有文件，设置为默认分支。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cd</span></span><br><span class="line"><span class="variable">$wget</span> https://nodejs.org/dist/v10.15.3/node-v10.15.3-linux-x64.tar.gz</span><br><span class="line"><span class="variable">$tar</span> -xzvf node-v10.15.3-linux-x64.tar.gz</span><br><span class="line"><span class="variable">$mv</span> node-v10.15.3-linux-x64 nodejs</span><br></pre></td></tr></table></figure>

<p>配置环境变量使nodejs与npm生效。以ubuntu16.04环境为例。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi .profile  </span><br><span class="line"><span class="comment"># 在PATH中添加nodejs所在位置路径，其中冒号:表示一个路径的结束，$HOME/nodejs/bin为新加的路径</span></span><br><span class="line">PATH=<span class="string">&quot;<span class="variable">$HOME</span>/bin:<span class="variable">$HOME</span>/.local/bin:<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/nodejs/bin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行source .profile或者reboot系统之后环境变量生效</span></span><br><span class="line"><span class="built_in">source</span> .profile</span><br><span class="line"></span><br><span class="line">$ node --version</span><br><span class="line">v10.15.3</span><br><span class="line">$ npm --version</span><br><span class="line">6.4.1</span><br><span class="line">$</span><br></pre></td></tr></table></figure>

<h3 id="2-在本地搭建hexo环境"><a href="#2-在本地搭建hexo环境" class="headerlink" title="2. 在本地搭建hexo环境"></a>2. 在本地搭建hexo环境</h3><p>在环境变量生效以后，普通账号拥有nodejs与npm程序，使用普通账号基于全局安装hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>配置ssh密钥，加入到github中,可以参考<a href="https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">官方指导Generating a new SSH key and adding it to the ssh-agent</a></p>
<h3 id="3-在本地搭建master分支"><a href="#3-在本地搭建master分支" class="headerlink" title="3. 在本地搭建master分支"></a>3. 在本地搭建master分支</h3><ol>
<li>在github上创建仓库：<code>wowmarcomei.github.io</code>，默认分支为<code>master</code>.</li>
<li>添加README.md到<strong>master</strong>分支</li>
<li>创建<strong>hexo</strong>分支</li>
<li>在本地clone hexo分支</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> -b hexo git@github.com:wowmarcomei/wowmarcomei.github.io.git</span><br><span class="line">$ <span class="built_in">cd</span> wowmarcomei.github.io.git</span><br><span class="line">$ hexo init</span><br></pre></td></tr></table></figure>

<p>在空仓库中初始化hexo工程，生成会生成hexo的工程文件，包括package.json等如下文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">drwxrwxr-x   6 ubuntu ubuntu   4096 Apr  1 11:10 ./</span><br><span class="line">drwxr-xr-x  10 ubuntu ubuntu   4096 Apr  1 11:10 ../</span><br><span class="line">-rw-rw-r--   1 ubuntu ubuntu   1765 Apr  1 11:10 _config.yml</span><br><span class="line">-rw-rw-r--   1 ubuntu ubuntu     65 Apr  1 11:10 .gitignore</span><br><span class="line">drwxrwxr-x 284 ubuntu ubuntu  12288 Apr  1 11:10 node_modules/</span><br><span class="line">-rw-rw-r--   1 ubuntu ubuntu    443 Apr  1 11:10 package.json</span><br><span class="line">-rw-rw-r--   1 ubuntu ubuntu 137375 Apr  1 11:10 package-lock.json</span><br><span class="line">drwxrwxr-x   2 ubuntu ubuntu   4096 Apr  1 11:10 scaffolds/</span><br><span class="line">drwxrwxr-x   3 ubuntu ubuntu   4096 Apr  1 11:10 <span class="built_in">source</span>/</span><br><span class="line">drwxrwxr-x   3 ubuntu ubuntu   4096 Apr  1 11:10 themes/</span><br></pre></td></tr></table></figure>

<p>其中node_modules文件是每个nodejs工程所需要安装的依赖包，不是全局包，每个工程都应该有一个这样目录，但是上传到github时最好把它删除掉，新用户clone该仓库后，可以在目录下执行<code>npm install</code>命令来生成新的node_modules目录。</p>
<p>_config.yml是网站的配置文件，包括主题选择等等。需要修改该文件指定托管部署地址。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">vi</span> <span class="string">_config.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:wowmarcomei/wowmarcomei.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>设置主题，可以选择<strong>hexo-theme-even</strong>主题，参考<a href="https://github.com/ahonn/hexo-theme-even">github</a>主页提示执行如下步骤安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> wowmarcomei.github.io.git</span><br><span class="line">$ npm install hexo-renderer-scss --save</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/ahonn/hexo-theme-even themes/even</span><br></pre></td></tr></table></figure>

<p>下载好了主题以后，修改配置文件中的 <code>theme</code> 字段为 <code>even</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Extensions</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Plugins: http://hexo.io/plugins/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Themes: http://hexo.io/themes/</span></span><br><span class="line">theme: even</span><br></pre></td></tr></table></figure>

<p>更多主题设置，查看 <a href="https://github.com/ahonn/hexo-theme-even/wiki">Document</a>, 可以删除themes主题下的<code>.git</code>目录与<code>.gitignore</code>文件。</p>
<p>如果使用的是<a href="https://github.com/shenliyang/hexo-theme-snippet">snippet</a>主题，因为 <strong>hexo-theme-snippet</strong> 使用了 <code>ejs</code> 模版引擎 、 <code>Less</code> CSS预编译语言以及在官方插件的基础上 进行功能的开发，以下为必装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-ejs hexo-renderer-less hexo-deployer-git -S</span><br></pre></td></tr></table></figure>

<p>在通过git上传到github之前，需要安装<code>hexo-deployer-git</code>，可以全局安装，也可以本地工程安装。下面采取本地安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>

<p>还有一些可选的hexo插件，可以安装到本地工程目录中去：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-admin --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line"></span><br><span class="line">npm install hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-markdown-it --save</span><br><span class="line"></span><br><span class="line">npm install hexo-symbols-count-time --save</span><br><span class="line"></span><br><span class="line">npm install hexo-generator-sitemap --save <span class="comment">#sitemap.xml适合提交给谷歌搜素引擎</span></span><br><span class="line">npm install hexo-generator-baidu-sitemap --save <span class="comment">#baidusitemap.xml适合提交百度搜索引擎</span></span><br><span class="line"></span><br><span class="line">npm install gulp -g</span><br><span class="line">npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</span><br><span class="line"></span><br><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>后续继续执行hexo命令来生成静态网站。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g <span class="comment"># 用hexo生成静态网站，位于public目录</span></span><br><span class="line">$ hexo s <span class="comment"># 本地生成查看静态网站，启动服务器业务</span></span><br><span class="line">$ hexo d <span class="comment"># 生成.deploy_git目录上传到托管网站github相应路径，即上传到master分支</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<ul>
<li><code>--save</code>参数会将库安装到本目录下的node_modules下面。</li>
<li>nodejs工程将需要安装的包写在<code>package.json</code>文件中。</li>
<li>使用<code>npm audit -fix</code>可以查出工程还需要哪些包</li>
<li>可以到<a href="https://mirrors.huaweicloud.com/%E4%B8%8B%E9%9D%A2%E6%9F%A5%E7%9C%8Bnodejs%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F">https://mirrors.huaweicloud.com/下面查看nodejs加速镜像</a></li>
</ul>
</blockquote>
<h3 id="4-在本地搭建hexo分支"><a href="#4-在本地搭建hexo分支" class="headerlink" title="4. 在本地搭建hexo分支"></a>4. 在本地搭建hexo分支</h3><p>上面已经在github上创建了hexo分支，使用git命令提交hexo程序到github的hexo分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add *</span><br><span class="line">$ git commit -m <span class="string">&quot;Initial Hexo Branch&quot;</span></span><br><span class="line">$ git push origin hexo <span class="comment"># 推送到hexo分支</span></span><br></pre></td></tr></table></figure>

<h2 id="二-在其他电脑搭建Hexo环境"><a href="#二-在其他电脑搭建Hexo环境" class="headerlink" title="二.在其他电脑搭建Hexo环境"></a>二.在其他电脑搭建Hexo环境</h2><blockquote>
<p>该电脑可以做hexo源码重新开发也可以只用作发布blog，可以分别通过控制hexo与master分支来进行同步即可。</p>
</blockquote>
<ol>
<li><p>搭建nodejs与npm环境，与上述步骤相同</p>
</li>
<li><p>搭建hexo全局环境，与上述步骤相同</p>
</li>
<li><p>生成ssh-key密钥，添加到github中，与上述步骤相同</p>
</li>
<li><p>复制hexo分支代码到本机</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> -b hexo git@github.com:wowmarcomei/wowmarcomei.github.io.git</span><br><span class="line">$ <span class="built_in">cd</span> wowmarcomei.github.io</span><br><span class="line">$ git branch <span class="comment">#查看当前分支，应该为hexo</span></span><br><span class="line">$ rm -fr node_modules  <span class="comment">#如果从github中clone下来的工程中有该目录就删除掉, 没有就算了</span></span><br><span class="line">$ vim .gitignore <span class="comment">#加入node_modules,public, .deploy_git这几个目录，</span></span><br><span class="line">$ npm install <span class="comment">#在工程目录中用 npm install 命令生成node_modules，每个项目有单独一套node_modules（像Java中的Maven那样),如果出现一些包需要更新的提示，如提示使用npm audit fix进行修复，则执行该命令</span></span><br></pre></td></tr></table></figure>

<p>   如果使用的是<a href="https://github.com/shenliyang/hexo-theme-snippet">snippet</a>主题，因为 <strong>hexo-theme-snippet</strong> 使用了 <code>ejs</code> 模版引擎 、 <code>Less</code> CSS预编译语言以及在官方插件的基础上 进行功能的开发，以下为必装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-ejs hexo-renderer-less hexo-deployer-git -S</span><br><span class="line">npm install hexo-generator-json-content@2.2.0 -S <span class="comment">#本地站点搜索插件</span></span><br></pre></td></tr></table></figure>

<p>   在通过git上传到github之前，需要安装<code>hexo-deployer-git</code>，可以全局安装，也可以本地工程安装。下面采取本地安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>

<p>   还有一些可选的hexo插件，可以安装到本地工程目录中去：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-admin --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">   </span><br><span class="line">npm i hexo-renderer-marked --save</span><br><span class="line">npm i hexo-renderer-markdown-it --save</span><br><span class="line">   </span><br><span class="line">npm install hexo-symbols-count-time --save</span><br><span class="line">   </span><br><span class="line">npm install hexo-generator-sitemap --save <span class="comment">#sitemap.xml提交给谷歌引擎</span></span><br><span class="line">npm install hexo-generator-baidu-sitemap --save <span class="comment">#baidusitemap.xml适合提交百度搜索引擎</span></span><br><span class="line">   </span><br><span class="line">npm install gulp --save</span><br><span class="line">npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</span><br><span class="line">   </span><br><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<ul>
<li><code>--save</code>参数会将库安装到本目录下的node_modules下面。</li>
<li>nodejs工程将需要安装的包写在<code>package.json</code>文件中。</li>
<li>使用<code>npm audit -fix</code>可以查出工程还需要哪些包</li>
<li>可以到<a href="https://mirrors.huaweicloud.com/%E4%B8%8B%E9%9D%A2%E6%9F%A5%E7%9C%8Bnodejs%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F">https://mirrors.huaweicloud.com/下面查看nodejs加速镜像</a></li>
</ul>
</blockquote>
<ol start="5">
<li>如果需要对Hexo源码进行操作,发布到hexo分支</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add *</span><br><span class="line">$ git commit -m <span class="string">&quot;your comment&quot;</span></span><br><span class="line">$ git push origin hexo <span class="comment">#推送到远程github的hexo分支</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>如果需要更新blog，则使用hexo操作发布到master</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ gulp   <span class="comment">#压缩html,css,js文件</span></span><br><span class="line">$ hexo s <span class="comment">#s为本地server模式</span></span><br><span class="line">$ hexo d <span class="comment">#d为deploy部署模式</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>如果有更换电脑，直接在新电脑上将hexo分支clone下来即可, master分支可以通过hexo命令生成</strong> 。另外，如果需要定制主题的话，一般是在<code>header.ejs</code>与<code>style.css</code>下面定制头与css样式。</p>
</blockquote>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Git</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【保姆式教程】搭建一套高速的永久免费CDN图床</title>
    <url>//deploy-img-hosting-with-cdn-for-free.html</url>
    <content><![CDATA[<blockquote>
<p>感谢大佬<a href="https://xpoet.cn/">XPoet</a>开发的基于 GitHub API 开发的图床神器<code>picx</code>，感谢<a href="https://www.jsdelivr.com/">jsDelivr</a>提供免费CDN 加速。</p>
</blockquote>
<p>简单总结一下思路：</p>
<ol>
<li>到<a href="https://github.com/meixuhong/picx">github</a>上克隆<code>picx</code>源码</li>
<li>在<a href="https://travis-ci.com/">travis-ci</a>上关联该<code>picx</code>项目</li>
<li>在<code>vue2-dev</code>分支调测并推送静态网站源码至<code>gh-pages</code>分支</li>
<li>在<a href="https://vercel.com/">Vercel</a>或者<a href="https://www.netlify.com/">Netlify</a>上关联<code>gh-pages</code>部署为静态网页</li>
</ol>
<h2 id="从Github上克隆源码"><a href="#从Github上克隆源码" class="headerlink" title="从Github上克隆源码"></a>从Github上克隆源码</h2><p>登录到<a href="https://github.com/meixuhong/picx">github</a>上克隆<code>picx</code>源码，其中<code>vue2-dev</code>分支是源码分支，<code>gh-pages</code>是用来存放静态网站的分支。</p>
<p><img src="https://cdn.jsdelivr.net/gh/imlaomei/cdn@main/img-hosting/1-clone-picx-source.png" alt="github_picx"></p>
<p>为了能通过<a href="https://travis-ci.com/">travis-ci</a>自动编译，我们需要对<a href="https://github.com/meixuhong/picx">github</a>设置钩子。到<a href="https://github.com/settings/tokens">github setting</a>上创建<code>token</code>，并关联至<a href="https://travis-ci.com/">travis-ci</a>.</p>
<p><img src="https://cdn.jsdelivr.net/gh/imlaomei/cdn@main/img-hosting/2-github-token-gen.png" alt="2-github-token-gen"></p>
<p>创建一个新的<code>token</code>，设置<code>scope</code>含<code>repo</code>.</p>
<p><img src="https://cdn.jsdelivr.net/gh/imlaomei/cdn@main/img-hosting/3-github-token-scope.png" alt="3-github-token-scope"></p>
<p>创建完成后，复制该<code>token</code>，需要注意的是该<code>token</code>只会出现一次，后续无法在<code>github</code>上查看，如果丢失，只能重新创建一个新的<code>token</code>，所以我们需要自己保存记录到本地。</p>
<h2 id="在Travis-CI上关联该项目"><a href="#在Travis-CI上关联该项目" class="headerlink" title="在Travis-CI上关联该项目"></a>在Travis-CI上关联该项目</h2><p>在<a href="https://travis-ci.com/">travis-ci</a>上关联该<code>picx</code>项目，如果没有<code>travis-ci</code>账号，可以使用<code>github</code>账号关联创建，此处不再复述。在<code>travis-ci</code>中设置环境变量，将刚才设置的<code>github</code>的<code>token</code>填入，如下图示。</p>
<ul>
<li>NAME填入<code>GH_TOKEN</code></li>
<li>VALUE填入<code>TOKEN值</code> , 即从github上创建生成的值</li>
<li>BRANCH填入源码分支<code>vue2.x-dev</code></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/imlaomei/cdn@main/img-hosting/4-travis-ci-setting-for-picx.png.png" alt="4-travis-ci-setting-for-picx"></p>
<h2 id="编译生成静态网站"><a href="#编译生成静态网站" class="headerlink" title="编译生成静态网站"></a>编译生成静态网站</h2><p><a href="https://travis-ci.com/">travis-ci</a>配置完成后，可以到<code>vue2-dev</code>源码分支修改文件，测试<code>travis-ci</code>是否支持编译了。比如，修改一下<code>Readme.md</code>文件并提交到仓库，<code>github</code>发生变化后，<code>travis-ci</code>通过钩子发现分支变化，于是开始编译，下图表示<code>travis-ci</code>正在编译<code>vue2.x-dev</code>分支源码。</p>
<p><img src="https://cdn.jsdelivr.net/gh/imlaomei/cdn@main/img-hosting/5-travis-building-project.png" alt="5-travis-building-project"></p>
<p>黄色表示正在编译，不出意外会完成编译，最终是绿色。</p>
<p><img src="https://cdn.jsdelivr.net/gh/imlaomei/cdn@main/img-hosting/6-travis-ci-done.png" alt="6-travis-ci-done"></p>
<p>完成编译后分别到github查看对应的源码状态。可以看到<code>vue2.x-dev</code>分支提交了一个文件。</p>
<p><img src="https://cdn.jsdelivr.net/gh/imlaomei/cdn@main/img-hosting/7-vue2.x-dev-branch-update.png" alt="7-vue2"></p>
<p><code>gh-pages</code>分支则由<strong>travisbot</strong>完成了编译。</p>
<p><img src="https://cdn.jsdelivr.net/gh/imlaomei/cdn@main/img-hosting/8-gh-pages-branch-update.png" alt="8-gh-pages-branch-update"></p>
<p>至于如何在该分支编译的，咱们暂且不用关注，如果感兴趣，可以查看一下<code>vue2.x-dev</code>分支下的<code>.travis.yml</code>源码。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编译语言、环境</span></span><br><span class="line"><span class="attr">dist:</span> <span class="string">xenial</span></span><br><span class="line"><span class="attr">os:</span> <span class="string">linux</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Node.js 版本</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span> <span class="string">npm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只有 源码 分支更改才触发 CI</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">vue2.x-dev</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">export</span> <span class="string">TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="comment"># 安装依赖</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span> <span class="comment"># 执行打包命令，生成 dist 静态文件</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">strategy:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">pages</span></span><br><span class="line">  <span class="attr">skip_cleanup:</span> <span class="literal">true</span>      <span class="comment"># 跳过清理</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">$GH_TOKEN</span>        <span class="comment"># GitHub Token 变量</span></span><br><span class="line">  <span class="attr">keep_history:</span> <span class="literal">true</span>      <span class="comment"># 保持推送记录，以增量提交的方式</span></span><br><span class="line">  <span class="attr">local_dir:</span> <span class="string">dist</span>         <span class="comment"># 需要推送到 GitHub 的静态文件目录</span></span><br><span class="line">  <span class="attr">target_branch:</span> <span class="string">gh-pages</span> <span class="comment"># 推送的目标文件 local_dir -&gt; gh-pages 分支</span></span><br><span class="line">  <span class="attr">on:</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">vue2.x-dev</span>        <span class="comment"># 源码工作分支</span></span><br></pre></td></tr></table></figure>

<h2 id="Vercel托管静态网站"><a href="#Vercel托管静态网站" class="headerlink" title="Vercel托管静态网站"></a>Vercel托管静态网站</h2><p><a href="https://vercel.com/">Vercel</a>为开发者提供免费的一键式托管服务，可以通过导入主流的代码托管平台的项目来进行静态网站托管。选择 Vercel 的原因不仅是因为其完全免费，而且在国内环境下，其部署的网站访问速度也算是一流。</p>
<blockquote>
<p><a href="https://www.netlify.com/">Netlify</a>也提供相同的功能与类似的CDN全站加速功能，两者功能与用法也都差不多，可以二选一。</p>
</blockquote>
<p>如果没有vercel账号，可以绑定github账号快速注册，完成注册后可以直接导入对应工程，如下图示。</p>
<p><img src="https://cdn.jsdelivr.net/gh/imlaomei/cdn@main/img-hosting/9-vercel-import-project.png" alt="9-vercel-import-project"></p>
<p>导入工程示意图如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/imlaomei/cdn@main/img-hosting/10-Select-vercel-scope.png" alt="10-Select-vercel-scope"></p>
<p><img src="https://cdn.jsdelivr.net/gh/imlaomei/cdn@main/img-hosting/11-import-default-branch-to-vercel.png" alt="11-import-default-branch-to-vercel"></p>
<p><img src="https://cdn.jsdelivr.net/gh/imlaomei/cdn@main/img-hosting/12-import-default-branch-to-vercel_build-options.png" alt="12-import-default-branch-to-vercel_build-options"></p>
<p><img src="https://cdn.jsdelivr.net/gh/imlaomei/cdn@main/img-hosting/13-start-building-project-in-vercel.png" alt="13-start-building-project-in-vercel"></p>
<p><img src="https://cdn.jsdelivr.net/gh/imlaomei/cdn@main/img-hosting/14-build-done-in-vercel.png" alt="14-build-done-in-vercel"></p>
<p>完成部署后，可点击<strong>Visit</strong>直接访问，填入之前配置的<code>github token</code>即可直接使用。填入token后可以选择github上的一个仓库，作为图床base，图片都存放于此，下面示意为，选择<a href="https://github.com/imlaomei/cdn">cdn</a>仓库。</p>
<p><img src="https://cdn.jsdelivr.net/gh/imlaomei/cdn@main/img-hosting/16-cdn-img-hosting-setting.png" alt="16-cdn-img-hosting-setting"></p>
<p>配置完成之后，就可以通过web直接上传图片了，当然也可以通过PicGo等工具设置自动上传。</p>
<p><img src="https://cdn.jsdelivr.net/gh/imlaomei/cdn@main/img-hosting/17-cdn-img-hosting-overview.png" alt="17-cdn-img-hosting-overview"></p>
<blockquote>
<p>后记：如果有域名，可以在Vercel上加一个自己的域名，不再复述，以上。</p>
</blockquote>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Tools</tag>
        <tag>jsDelivr</tag>
        <tag>Vercel</tag>
        <tag>Netlify</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下修改Mysql密码</title>
    <url>//how-to-modify-mysql-password-in-windows.html</url>
    <content><![CDATA[<p>之前在Windows上装过一次Mysql学习，后来由于电脑原因卸载了，这次重新安装后，发现在配置过程中失败，退出配置后直接登录也不行，多次查询之后才知道原来是因为很久之前安装的mysql的密码与这次安装的密码不一致导致的，可是，过了这么久天知道我当时设置的啥密码啊。。。好吧，那就重置吧。</p>
<ul>
<li>环境： Windows 10</li>
<li>Mysql 版本： mysql community 5.7.21.0</li>
<li>CMD： 系统自带cmd，管理员权限</li>
</ul>
<h2 id="1-重置步骤"><a href="#1-重置步骤" class="headerlink" title="1. 重置步骤"></a>1. 重置步骤</h2><h3 id="1-1-停止mysql服务"><a href="#1-1-停止mysql服务" class="headerlink" title="1.1 停止mysql服务"></a>1.1 停止mysql服务</h3><p>使用管理员权限cmd执行下面命令停止服务</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># net stop mysql57</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-配置mysql跳过安全检查"><a href="#1-2-配置mysql跳过安全检查" class="headerlink" title="1.2 配置mysql跳过安全检查"></a>1.2 配置mysql跳过安全检查</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cmd 1:</span></span><br><span class="line"><span class="comment">#my.ini为配置文件</span></span><br><span class="line">mysqld -<span class="literal">-defaults</span><span class="operator">-file</span>=<span class="string">&quot;C:\ProgramData\MySQL\MySQL Server 5.7\my.ini&quot;</span> -<span class="literal">-console</span> -<span class="literal">-skip</span><span class="literal">-grant</span><span class="literal">-tables</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-重置密码"><a href="#1-3-重置密码" class="headerlink" title="1.3 重置密码"></a>1.3 重置密码</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cmd 2: 使用管理员权限打开另外一个cmd窗口，由于上面的cmd1窗口在运行着，所以我们可以不用输入密码进行登录</span></span><br><span class="line">&gt;mysql <span class="literal">-u</span> root</span><br><span class="line"><span class="comment">#修改mysql数据库中的表user，给user表中的root账号修改密码</span></span><br><span class="line"><span class="variable">$mysql</span>&gt; use mysql;</span><br><span class="line"><span class="comment">#注意新版本需要使用authentication_string修改密码</span></span><br><span class="line"><span class="variable">$mysql</span>&gt; update user <span class="built_in">set</span> authentication_string=password(<span class="string">&quot;abcdefg123&quot;</span>) <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="comment">#刷新表</span></span><br><span class="line"><span class="variable">$mysql</span>&gt; flush privileges;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-关闭mysqld进程"><a href="#1-4-关闭mysqld进程" class="headerlink" title="1.4 关闭mysqld进程"></a>1.4 关闭mysqld进程</h3><p>关闭两个cmd窗口，Ctrl+Shift+Esc打开任务管理器找到mysqld的进程，将其杀死。</p>
<h3 id="1-5-重新启动mysql服务："><a href="#1-5-重新启动mysql服务：" class="headerlink" title="1.5 重新启动mysql服务："></a>1.5 重新启动mysql服务：</h3><p>打开计算管理——&gt;服务与应用程序—-&gt;服务—&gt;mysql，启动服务。</p>
<h3 id="1-6-登录mysql"><a href="#1-6-登录mysql" class="headerlink" title="1.6 登录mysql"></a>1.6 登录mysql</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#执行下面命令，输入密码即可登录</span></span><br><span class="line">&gt; mysql <span class="literal">-u</span> root <span class="literal">-p</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>如何同时设置子域名和顶级域名到Github Pages</title>
    <url>//how-to-set-sub-domain-and-naked-domain-to-Github-Pages-simultaneously.html</url>
    <content><![CDATA[<blockquote>
<p>目标：1) 通过Github Pages搭建自己的静态网站.  2)将自己购买的域名解析到Github Pages.  3) 将顶级域名<code>example.com</code>和子域名<code>www.example.com</code>解析到Github Pages。</p>
</blockquote>
<h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ol>
<li>在<a href="https://www.namesilo.com/**?rid=8dbc698fz**">Namesilo</a>上购买域名<code>example.com</code></li>
<li>在Github搭建好Pages，参考<a href="https://lmbiji.com/create-github-pages-with-hexo.html">使用Hexo搭建Github Page</a></li>
<li>已注册<a href="https://www.cloudflare.com/">cloudflare</a>账号</li>
</ol>
<h3 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h3><ol>
<li><strong>获取NS服务器</strong> - 在<a href="https://www.cloudflare.com/">cloudflare</a>上添加站点<code>example.com</code>，生成NS服务器域名</li>
<li><strong>配置NS服务器</strong> - 在<a href="https://www.namesilo.com/**?rid=8dbc698fz**">Namesilo</a>上将域名的NS服务器换成<a href="https://www.cloudflare.com/">cloudflare</a>上的NS服务器</li>
<li><strong>DNS解析</strong> - 在<a href="https://www.cloudflare.com/">cloudflare</a>上设置DNS解析，包含<code>A</code>解析和<code>CNAME</code>解析</li>
<li><strong>设置Github Page的CNAME</strong> - 在<code>Hexo</code>工程中的<code>source</code>下面添加CNAME文件，并在Github工程中设置绑定域名为顶级域名<code>example.com</code></li>
</ol>
<h3 id="图解详细步骤"><a href="#图解详细步骤" class="headerlink" title="图解详细步骤"></a>图解详细步骤</h3><ol>
<li>在<a href="https://www.cloudflare.com/">cloudflare</a>上添加站点，生成NS服务器域名。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/Cloudflare-addsite.jpg" alt="cloudflare添加站点"></p>
<p>图中的<code>jonah.ns.cloudflare.com</code>与<code>stevie.ns.cloudflare.com</code>就是<a href="https://www.cloudflare.com/">cloudflare</a>的NS服务器，NS服务器就是DNS服务器，是对域名进行DNS解析的服务器，国内最大的DNS服务器是<code>DNSPOD</code>，但是由于国内域名需要备案，只能解析到国外服务器IP，且<code>CNAME</code>解析可能有不可预知的问题。这也是我在尝试几次失败之后到<a href="https://www.namesilo.com/**?rid=8dbc698fz**">Namesilo</a>上购买域名，到<a href="https://www.cloudflare.com/">cloudflare</a>上解析DNS的原因。</p>
<ol start="2">
<li>在<a href="https://www.namesilo.com/**?rid=8dbc698fz**">Namesilo</a>上将域名的NS服务器换成<a href="https://www.cloudflare.com/">cloudflare</a>上的NS服务器</li>
</ol>
<p>选中指定域名右侧的DNS NS服务器，修改NS服务器为上述域名后提交，大概半小时可以生效，慢的话可能需要1天。</p>
<p><img src="https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/namesilo-dns-NS.jpg"></p>
<p><img src="https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/namesilo-dns-NS-change.jpg"></p>
<ol start="3">
<li>在<a href="https://www.cloudflare.com/">cloudflare</a>上设置DNS解析，包含<code>A</code>解析和<code>CNAME</code>解析</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@        A        185.199.108.153</span><br><span class="line">@        A        185.199.109.153</span><br><span class="line">@        A        185.199.110.153</span><br><span class="line">@        A        185.199.111.153</span><br><span class="line">www      CNAME    your_github_username.github.io.</span><br></pre></td></tr></table></figure>

<p>如何得知上述的4个IP地址呢？到 <a href="https://www.ipaddress.com/dns-lookup">https://www.ipaddress.com/dns-lookup</a> 中查询DNS即可。上表中的<code>your_github_username</code>需要换成自己的账号。解析大概需要1个小时左右生效。</p>
<p><img src="https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/cloudflare-lmbiji.com.jpg"></p>
<ol start="4">
<li> 在<code>Hexo</code>工程中的<code>source</code>下面添加CNAME文件，并在Github工程中设置绑定域名为顶级域名<code>example.com</code></li>
</ol>
<ul>
<li>在工程文件的source目录下新建CNAME，写入顶级域名<code>lmbiji.com</code>, 使用<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>命令会在<code>public</code>目录下生成<code>CNAME</code>文件并上传到Github io对应的仓库下</li>
<li>在Github Pages选项中设置绑定顶级域名<code>lmbiji.com</code></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/github-naked-domain.jpg"></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Python解析Kindle中的标记文件</title>
    <url>//parse-the-kindle-markup-files-by-using-python.html</url>
    <content><![CDATA[<p>以前我们好不容易买了一本原版英文书，硬着头皮看下去，几分钟后就昏昏欲睡，因为太多单词不认识，看几页后就没办法进入状态。现在很多人开始使用Kindle阅读英文原版书，其内置词典（当然你也可以添加自己的词典），可以很方便地就可以查出单词释义了。当然并不推荐每遇到不认识的单词就查，这样也及其容易疲劳，之前看过奶爸的《把你的英语用起来》里面提到的透析法，其阅读原著技巧总结起来就是：每天阅读定量（如20页）的原版书籍，阅读一页查阅2个单词左右，每天积累一定的单词并且重复学习，这样避免一直在记单词的梗中，又能体会阅读原著的乐趣，确实是一个很好的办法。</p>
<p>但是这样也有一个弊端，每天需要花费大量的时间整理Kindle上的标记的单词与例句，用于后续学习与复习。去年在听读Harry Potter的时候就遇到这种情况，如果我花费<strong>1小时</strong>练习听音频，会花费<strong>1.5小时</strong>阅读，然后至少需要花费<strong>2小时</strong>查询单词，整理单词、语句与输出总结，这当然是我所不能接受的，都说需要把时间浪费在美好的事物上的么。</p>
<p>所以最终在经过探索使用Python写出了这个小工具，经过最新更新基本实现了如下几点功能：</p>
<ol>
<li>将在Kindle阅读器上标记的单词与语句输出为Markdown表格文件。</li>
<li>单词自动查询释义，将从网易有道词典网站查获的结果保存存于表格中。</li>
<li>将Kindle中标记的单词与语句自动关联，整理输出最终表格。</li>
</ol>
<p>使用示例：</p>
<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><ol>
<li>在Kindle上阅读Harry Potter原著，对不认识的单词与语句进行标记，最终会在Kindle的根目录下生成My Clippings.txt文件。</li>
<li>将该文件导出到电脑,重新命名为My_Clippings.txt,主要是为了去掉文件名的空格</li>
</ol>
<h2 id="2-运行程序"><a href="#2-运行程序" class="headerlink" title="2. 运行程序"></a>2. 运行程序</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python3 main.py --prefix=static -t 2017-2-25 -i My_Clippings.txt -o words_chapters_9.md</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参数说明：</p>
<ul>
<li>–prefix为指定源目录为static,当然也可以指定别的目录,但是需要将My_Clippings.txt文件将其移动到相应目录里</li>
<li>-t 为选择时间</li>
<li>-i 为指定输入源文件,即目录中的txt文件</li>
<li>-o 为指定输出源文件,即输出的markdown文件</li>
</ul>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/python-kindle.gif" alt="kindle-python"></p>
<p>源码开源在<a href="https://github.com/wowmarcomei/kindle_notes_export">github</a>，欢迎star与使用。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Kindle</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos上部署Harbor私有仓库</title>
    <url>//deploy-harbor-repository-in-centos.html</url>
    <content><![CDATA[<p>Harbor是VMware公司开源的企业级的Docker Registry管理项目，它包括权限管理(RBAC)、LDAP、日志审核、管理界面、自我注册、镜像复制和中文支持等功能。使用Harbor可以部署企业自己的私有仓库，将一些核心镜像与软件与外部网络进行隔离与防护。</p>
<h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><p>本次在腾讯云ECS服务器上部署Harbor私有仓库，系统与相关信息如下。</p>
<p>硬件信息：</p>
<table>
<thead>
<tr>
<th>资源</th>
<th>容量</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>CPU</td>
<td>2 核</td>
<td>4 CPU is preferred</td>
</tr>
<tr>
<td>内存</td>
<td>2 GB</td>
<td>8GB is preferred</td>
</tr>
<tr>
<td>磁盘</td>
<td>50 GB</td>
<td>160GB is preferred</td>
</tr>
<tr>
<td>网络</td>
<td>2 Mbps</td>
<td>4Mbps is preferred</td>
</tr>
</tbody></table>
<p>软件信息：</p>
<table>
<thead>
<tr>
<th>软件</th>
<th>版本</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Centos</td>
<td>CentOS 7.6 64位</td>
<td>\</td>
</tr>
<tr>
<td>Docker</td>
<td>19.03.1</td>
<td>官方安装指南 <a href="https://docs.docker.com/engine/installation/">docker engine doc</a></td>
</tr>
<tr>
<td>Docker Compose</td>
<td>1.22.0</td>
<td>官方安装指南 <a href="https://docs.docker.com/compose/install/">docker compose doc</a></td>
</tr>
<tr>
<td>Openssl</td>
<td>OpenSSL 1.0.2k-fips</td>
<td>为Harbor生成证书与密钥</td>
</tr>
</tbody></table>
<blockquote>
<p>注意：Harbor的所有服务组件都是在Docker中部署的，所以官方安装使用Docker-compose快速部署，因此需要安装Docker、Docker-compose。由于Harbor是基于Docker Registry V2版本，所以就要求Docker版本不小于1.10.0，Docker-compose版本不小于1.6.0。</p>
</blockquote>
<h2 id="2-安装Docker与Docker-Compose"><a href="#2-安装Docker与Docker-Compose" class="headerlink" title="2. 安装Docker与Docker-Compose"></a>2. 安装Docker与Docker-Compose</h2><h3 id="2-1-安装Docker"><a href="#2-1-安装Docker" class="headerlink" title="2.1 安装Docker"></a>2.1 安装Docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install -y yum-utils device-mapper-persistent-data lvm2 epel-release</span></span><br><span class="line"><span class="comment"># yum-config-manager --add-repo  https://download.docker.com/linux/centos/docker-ce.repo</span></span><br><span class="line"><span class="comment"># yum install docker-ce</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-启动Docker"><a href="#2-2-启动Docker" class="headerlink" title="2.2 启动Docker"></a>2.2 启动Docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl enable docker</span></span><br><span class="line"><span class="comment"># systemctl start docker</span></span><br><span class="line"><span class="comment"># docker --version</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-安装Docker-Compose"><a href="#2-3-安装Docker-Compose" class="headerlink" title="2.3 安装Docker-Compose"></a>2.3 安装Docker-Compose</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span></span><br><span class="line"><span class="comment"># chmod +x /usr/local/bin/docker-compose</span></span><br><span class="line"><span class="comment"># docker-compose --version</span></span><br></pre></td></tr></table></figure>

<h3 id="2-4-配置证书与密钥"><a href="#2-4-配置证书与密钥" class="headerlink" title="2.4 配置证书与密钥"></a>2.4 配置证书与密钥</h3><p>通过OpenSSL工具生成自签名的证书，后面将用于对请求进行校验。官方指南参考：<a href="https://github.com/goharbor/harbor/blob/master/docs/configure_https.md"><strong>Configuring Harbor with HTTPS Access</strong></a></p>
<ul>
<li><p>首先找到OpenSSL工具配置文件openssl.cnf，对于Centos,目录在/etc/pki/tls/中，编辑openssl.cnf,在[v3_ca]下面添加：subjectAltName = IP:域名|IP地址。如果没有域名填写IP即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ v3_ca ]</span><br><span class="line">subjectAltName = IP:193.112.221.230</span><br></pre></td></tr></table></figure></li>
<li><p>通过OpenSSL生成证书与密钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM_95_141_centos data]<span class="comment"># cd /data/ssl</span></span><br><span class="line">[root@VM_95_141_centos ssl]<span class="comment"># openssl req -newkey rsa:4096 -nodes -sha256 -keyout ca.key -x509 -days 365 -out ca.crt</span></span><br><span class="line">[root@VM_95_141_centos ssl]<span class="comment"># ls</span></span><br><span class="line">ca.crt  ca.key</span><br><span class="line">[root@VM_95_141_centos ssl]<span class="comment"># cp ca.crt /etc/pki/ca-trust/source/anchors/</span></span><br><span class="line">[root@VM_95_141_centos ssl]<span class="comment"># update-ca-trust enable</span></span><br><span class="line">[root@VM_95_141_centos ssl]<span class="comment"># update-ca-trust extract</span></span><br></pre></td></tr></table></figure></li>
<li><p>将生成的私有证书追加到系统的证书管理文件中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM_95_141_centos harbor]<span class="comment"># cat ssl/ca.crt &gt;&gt; /etc/pki/tls/certs/ca-bundle.crt</span></span><br></pre></td></tr></table></figure></li>
<li><p>重启docker, 该步骤一定不要省略，否则有可能加载私钥失败 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM_95_141_centos harbor]<span class="comment">#systemctl restart docker</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-安装Harbor"><a href="#3-安装Harbor" class="headerlink" title="3. 安装Harbor"></a>3. 安装Harbor</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://storage.googleapis.com/harbor-releases/release-1.8.0/harbor-offline-installer-v1.8.2.tgz</span></span><br><span class="line"><span class="comment"># tar xzvf harbor-offline-installer-v1.8.2.tgz</span></span><br><span class="line"><span class="comment"># cd harbor/</span></span><br><span class="line"><span class="comment"># ls </span></span><br></pre></td></tr></table></figure>

<p>下载离线安装包，解压后可以看到里面包含了如下文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM_95_141_centos harbor]# ls</span><br><span class="line">harbor.v1.8.2.tar.gz  harbor.yml  install.sh  LICENSE  prepare</span><br></pre></td></tr></table></figure>

<p>其中<code>harbor.v1.8.2.tar.gz</code>是软件包，<code>harbor.yml</code>是配置文件，<code>install.sh</code>是安装脚本，<code>prepare</code>是准备配置Harbor环境脚本。需要修改<code>harbor.yml</code>如下字段进行配置。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">hostname:</span> <span class="number">193.112</span><span class="number">.221</span><span class="number">.230</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># http related config</span></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line">  <span class="comment"># port for http, default is 80. If https enabled, this port will redirect to https port</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https related config</span></span><br><span class="line"><span class="attr">https:</span></span><br><span class="line">  <span class="comment"># https port for harbor, default is 443</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">  <span class="comment"># The path of cert and key files for nginx</span></span><br><span class="line">  <span class="attr">certificate:</span> <span class="string">/data/ssl/ca.crt</span></span><br><span class="line">  <span class="attr">private_key:</span> <span class="string">/data/ssl/ca.key</span></span><br></pre></td></tr></table></figure>

<p>然后先后执行<code>prepare</code>与<code>install.sh</code>进行配置与安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM_95_141_centos harbor]<span class="comment"># ./prepare</span></span><br><span class="line">prepare base dir is <span class="built_in">set</span> to /root/harbor</span><br><span class="line">Generated configuration file: /config/<span class="built_in">log</span>/logrotate.conf</span><br><span class="line">Generated configuration file: /config/nginx/nginx.conf</span><br><span class="line">Generated configuration file: /config/core/env</span><br><span class="line">Generated configuration file: /config/core/app.conf</span><br><span class="line">Generated configuration file: /config/registry/config.yml</span><br><span class="line">Generated configuration file: /config/registryctl/env</span><br><span class="line">Generated configuration file: /config/db/env</span><br><span class="line">Generated configuration file: /config/jobservice/env</span><br><span class="line">Generated configuration file: /config/jobservice/config.yml</span><br><span class="line">loaded secret from file: /secret/keys/secretkey</span><br><span class="line">Generated configuration file: /compose_location/docker-compose.yml</span><br><span class="line">Clean up the input dir</span><br><span class="line">[root@VM_95_141_centos harbor]<span class="comment"># ls -l</span></span><br><span class="line">total 564668</span><br><span class="line">drwxr-xr-x 3 root root      4096 Aug 24 23:09 common</span><br><span class="line">-rw-r--r-- 1 root root      5377 Aug 24 23:09 docker-compose.yml</span><br><span class="line">-rw-r--r-- 1 root root 578167000 Aug  8 15:51 harbor.v1.8.2.tar.gz</span><br><span class="line">-rw-r--r-- 1 root root      4494 Aug 24 23:08 harbor.yml</span><br><span class="line">-rwxr-xr-x 1 root root      5088 Aug  8 15:51 install.sh</span><br><span class="line">-rw-r--r-- 1 root root     11347 Aug  8 15:51 LICENSE</span><br><span class="line">-rwxr-xr-x 1 root root      1654 Aug  8 15:51 prepare</span><br><span class="line">[root@VM_95_141_centos harbor]<span class="comment"># vi docker-compose.yml</span></span><br><span class="line">[root@VM_95_141_centos harbor]<span class="comment"># ./install.sh</span></span><br></pre></td></tr></table></figure>

<p>一般都会安装成功。</p>
<h2 id="4-操作Harbor"><a href="#4-操作Harbor" class="headerlink" title="4. 操作Harbor"></a>4. 操作Harbor</h2><p>Harbor安装成功后，如下图示。我们可以对齐进行启动、停止、修改、上传镜像、下载镜像等操作。<br><img src="https://cdn.jsdelivr.net/gh/meixuhong/cdn/img/harbor.jpg" alt="Harbor"></p>
<h3 id="4-1-查看Harbor"><a href="#4-1-查看Harbor" class="headerlink" title="4.1 查看Harbor"></a>4.1 查看Harbor</h3><p>可以通过<code>docker ps</code>命令查询当前有哪些docker实例在运行。查询Harbor是否正常运行还可以查询docker-compose运行状态。需要进入Harbor所在目录，执行<code>docker-compose ps</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM_95_141_centos harbor]<span class="comment"># docker-compose ps</span></span><br><span class="line">Name                 Command                  State                        Ports</span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line">harbor-core         /harbor/start.sh                 Up (healthy)</span><br><span class="line">harbor-db           /entrypoint.sh postgres          Up (healthy)   5432/tcp</span><br><span class="line">harbor-jobservice   /harbor/start.sh                 Up</span><br><span class="line">harbor-log          /bin/sh -c /usr/<span class="built_in">local</span>/bin/ ...   Up (healthy)   127.0.0.1:1514-&gt;10514/tcp</span><br><span class="line">harbor-portal       nginx -g daemon off;             Up (healthy)   80/tcp</span><br><span class="line">nginx               nginx -g daemon off;             Up (healthy)   0.0.0.0:443-&gt;443/tcp, 0.0.0.0:80-&gt;80/tcp</span><br><span class="line">redis               docker-entrypoint.sh redis ...   Up             6379/tcp</span><br><span class="line">registry            /entrypoint.sh /etc/regist ...   Up (healthy)   5000/tcp</span><br><span class="line">registryctl         /harbor/start.sh                 Up (healthy)</span><br><span class="line">[root@VM_95_141_centos harbor]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2-停止与重启Harbor"><a href="#4-2-停止与重启Harbor" class="headerlink" title="4.2 停止与重启Harbor"></a>4.2 停止与重启Harbor</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM_95_141_centos ~]<span class="comment"># cd harbor</span></span><br><span class="line">[root@VM_95_141_centos harbor]<span class="comment"># ls</span></span><br><span class="line">common  docker-compose.yml  harbor.v1.8.2.tar.gz  harbor.yml  install.sh  LICENSE  prepare</span><br><span class="line">[root@VM_95_141_centos harbor]<span class="comment"># docker-compose stop</span></span><br><span class="line">Stopping nginx             ... <span class="keyword">done</span></span><br><span class="line">Stopping harbor-portal     ... <span class="keyword">done</span></span><br><span class="line">Stopping harbor-jobservice ... <span class="keyword">done</span></span><br><span class="line">Stopping harbor-core       ... <span class="keyword">done</span></span><br><span class="line">Stopping registryctl       ... <span class="keyword">done</span></span><br><span class="line">Stopping redis             ... <span class="keyword">done</span></span><br><span class="line">Stopping registry          ... <span class="keyword">done</span></span><br><span class="line">Stopping harbor-db         ... <span class="keyword">done</span></span><br><span class="line">Stopping harbor-log        ... <span class="keyword">done</span></span><br><span class="line">[root@VM_95_141_centos harbor]<span class="comment"># docker-compose start</span></span><br><span class="line">Starting <span class="built_in">log</span>         ... <span class="keyword">done</span></span><br><span class="line">Starting registry    ... <span class="keyword">done</span></span><br><span class="line">Starting registryctl ... <span class="keyword">done</span></span><br><span class="line">Starting postgresql  ... <span class="keyword">done</span></span><br><span class="line">Starting core        ... <span class="keyword">done</span></span><br><span class="line">Starting portal      ... <span class="keyword">done</span></span><br><span class="line">Starting redis       ... <span class="keyword">done</span></span><br><span class="line">Starting jobservice  ... <span class="keyword">done</span></span><br><span class="line">Starting proxy       ... <span class="keyword">done</span></span><br><span class="line">[root@VM_95_141_centos harbor]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>如果需要修改Harbor的配置，可以先停止Harbor实例，更新 <code>harbor.yml</code>文件，再执行 <code>prepare</code> 脚本重新构建配置，最终启动Harbor实例:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM_95_141_centos ~]<span class="comment"># docker-compose down -v</span></span><br><span class="line">[root@VM_95_141_centos ~]<span class="comment"># vim harbor.yml</span></span><br><span class="line">[root@VM_95_141_centos ~]<span class="comment"># prepare</span></span><br><span class="line">[root@VM_95_141_centos ~]<span class="comment"># docker-compose up -d</span></span><br></pre></td></tr></table></figure>

<p>清除Harbor实例的时候会保持镜像数据与数据库在系统中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM_95_141_centos ~]<span class="comment"># docker-compose down -v</span></span><br></pre></td></tr></table></figure>

<p>删除Harbor数据库与镜像数据 (如果需要重新安装):</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM_95_141_centos ~]<span class="comment"># rm -r /data/database</span></span><br><span class="line">[root@VM_95_141_centos ~]<span class="comment"># rm -r /data/registry</span></span><br></pre></td></tr></table></figure>

<h3 id="4-3-上传镜像到Harbor"><a href="#4-3-上传镜像到Harbor" class="headerlink" title="4.3 上传镜像到Harbor"></a>4.3 上传镜像到Harbor</h3><p>查看当前镜像:<code>docker images</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM_95_141_centos harbor]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                      TAG                       IMAGE ID      C   REATED      SIZE</span><br><span class="line">goharbor/chartmuseum-photon     v0.9.0-v1.8.2             e72f3e685a37  2   weeks ago  130MB</span><br><span class="line">goharbor/harbor-migrator        v1.8.2                    c11a64ae3a1e  2   weeks ago  361MB</span><br><span class="line">goharbor/redis-photon           v1.8.2                    18036ee471bc  2   weeks ago  107MB</span><br><span class="line">goharbor/clair-photon           v2.0.8-v1.8.2             68de68a40e66  2   weeks ago  164MB</span><br><span class="line">goharbor/notary-server-photon   v0.6.1-v1.8.2             90cf28ef3a84  2   weeks ago  135MB</span><br><span class="line">goharbor/notary-signer-photon   v0.6.1-v1.8.2             e9b49ea8ed32  2   weeks ago  132MB</span><br><span class="line">goharbor/harbor-registryctl     v1.8.2                    ad798fd6e618  2   weeks ago  96.5MB</span><br><span class="line">goharbor/registry-photon        v2.7.1-patch-2819-v1.8.2  081bfb3dc181  2   weeks ago  81.6MB</span><br><span class="line">goharbor/nginx-photon           v1.8.2                    1592a48daeac  2   weeks ago  36.2MB</span><br><span class="line">goharbor/harbor-log             v1.8.2                    42ad5ef672dd  2   weeks ago  81.8MB</span><br><span class="line">goharbor/harbor-jobservice      v1.8.2                    623ed0095966  2   weeks ago  119MB</span><br><span class="line">goharbor/harbor-core            v1.8.2                    03d6daab10c7  2   weeks ago  135MB</span><br><span class="line">goharbor/harbor-portal          v1.8.2                    41e264a7980b  2   weeks ago  43.2MB</span><br><span class="line">goharbor/harbor-db              v1.8.2                    927ecd68ee1f  2   weeks ago  144MB</span><br><span class="line">goharbor/prepare                v1.8.2                    b0d62cc7683d  2   weeks ago  145MB</span><br></pre></td></tr></table></figure>

<p>从Docker hub上下载一个最新的Nginx镜像:<code>docker pull nginx</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM_95_141_centos harbor]# docker pull nginx</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">1ab2bdfe9778: Pull complete</span><br><span class="line">a17e64cfe253: Pull complete</span><br><span class="line">e1288088c7a8: Pull complete</span><br><span class="line">Digest: sha256:53ddb41e46de3d63376579acf46f9a41a8d7de33645db47a486de9769201fec9</span><br><span class="line">Status: Downloaded newer image for nginx:latest</span><br><span class="line">docker.io/library/nginx:latest</span><br><span class="line">[root@VM_95_141_centos harbor]# docker images</span><br><span class="line">REPOSITORY                    TAG                      IMAGE ID      CREATED     SIZE</span><br><span class="line">nginx                         latest                   5a3221f0137b  8 days ago  126MB</span><br><span class="line">goharbor/chartmuseum-photon   v0.9.0-v1.8.2            e72f3e685a37  2 weeks ago 130MB</span><br><span class="line">goharbor/harbor-migrator      v1.8.2                   c11a64ae3a1e  2 weeks ago 361MB</span><br><span class="line">goharbor/redis-photon         v1.8.2                   18036ee471bc  2 weeks ago 107MB</span><br><span class="line">goharbor/clair-photon         v2.0.8-v1.8.2            68de68a40e66  2 weeks ago 164MB</span><br><span class="line">goharbor/notary-server-photon v0.6.1-v1.8.2            90cf28ef3a84  2 weeks ago 135MB</span><br><span class="line">goharbor/notary-signer-photon v0.6.1-v1.8.2            e9b49ea8ed32  2 weeks ago 132MB</span><br><span class="line">goharbor/harbor-registryctl   v1.8.2                   ad798fd6e618  2 weeks ago 96.5MB</span><br><span class="line">goharbor/registry-photon      v2.7.1-patch-2819-v1.8.2 081bfb3dc181  2 weeks ago 81.6MB</span><br><span class="line">goharbor/nginx-photon         v1.8.2                   1592a48daeac  2 weeks ago 36.2MB</span><br><span class="line">goharbor/harbor-log           v1.8.2                   42ad5ef672dd  2 weeks ago 81.8MB</span><br><span class="line">goharbor/harbor-jobservice    v1.8.2                   623ed0095966  2 weeks ago 119MB</span><br><span class="line">goharbor/harbor-core          v1.8.2                   03d6daab10c7  2 weeks ago 135MB</span><br><span class="line">goharbor/harbor-portal        v1.8.2                   41e264a7980b  2 weeks ago 43.2MB</span><br><span class="line">goharbor/harbor-db            v1.8.2                   927ecd68ee1f  2 weeks ago 144MB</span><br><span class="line">goharbor/prepare              v1.8.2                   b0d62cc7683d  2 weeks ago 145MB</span><br></pre></td></tr></table></figure>

<p>给Nginx镜像打上新标签，push到Harbor:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM_95_141_centos harbor]# docker tag nginx-mei:v1.0 193.112.221.230/library/nginx:latest</span><br><span class="line">[root@VM_95_141_centos harbor]# docker login 193.112.221.230 -uadmin -pHarbor12345</span><br><span class="line">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br><span class="line">[root@VM_95_141_centos harbor]# docker push 193.112.221.230/library/nginx:latest</span><br><span class="line">The push refers to repository [193.112.221.230/library/nginx]</span><br><span class="line">12fdf55172df: Pushed</span><br><span class="line">002a63507c1c: Pushed</span><br><span class="line">1c95c77433e8: Pushed</span><br><span class="line">latest: digest: sha256:099019968725f0fc12c4b69b289a347ae74cc56da0f0ef56e8eb8e0134fc7911 size: 948</span><br><span class="line">[root@VM_95_141_centos harbor]#</span><br></pre></td></tr></table></figure>

<h3 id="4-4-从Harbor中下载镜像"><a href="#4-4-从Harbor中下载镜像" class="headerlink" title="4.4 从Harbor中下载镜像"></a>4.4 从Harbor中下载镜像</h3><p>从Harbor中下载刚上传的Nginx镜像，可以先删除本地的Nginx镜像。然后再从Harbor中Pull下来。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM_95_141_centos harbor]# docker rmi 193.112.221.230/library/nginx:latest</span><br><span class="line">Untagged: 193.112.221.230/library/nginx:latest</span><br><span class="line">Untagged: 193.112.221.230/library/nginx@sha256:099019968725f0fc12c4b69b289a347ae74cc56da0f0ef56e8eb8e0134fc7911</span><br><span class="line">[root@VM_95_141_centos harbor]# docker images</span><br><span class="line">REPOSITORY                     TAG                      IMAGE ID     CREATED     SIZE</span><br><span class="line">wordpress                      latest                   fc03dc56d371 3 days ago  502MB</span><br><span class="line">193.112.221.230/mei_test/nginx v1.0                     5a3221f0137b 9 days ago  126MB</span><br><span class="line">nginx-mei                      v1.0                     5a3221f0137b 9 days ago  126MB</span><br><span class="line">nginx                          latest                   5a3221f0137b 9 days ago  126MB</span><br><span class="line">mysql                          5.6                      732765f8c7d2 11 days ago 257MB</span><br><span class="line">goharbor/chartmuseum-photon    v0.9.0-v1.8.2            e72f3e685a37 2 weeks ago 130MB</span><br><span class="line">goharbor/harbor-migrator       v1.8.2                   c11a64ae3a1e 2 weeks ago 361MB</span><br><span class="line">goharbor/redis-photon          v1.8.2                   18036ee471bc 2 weeks ago 107MB</span><br><span class="line">goharbor/clair-photon          v2.0.8-v1.8.2            68de68a40e66 2 weeks ago 164MB</span><br><span class="line">goharbor/notary-server-photon  v0.6.1-v1.8.2            90cf28ef3a84 2 weeks ago 135MB</span><br><span class="line">goharbor/notary-signer-photon  v0.6.1-v1.8.2            e9b49ea8ed32 2 weeks ago 132MB</span><br><span class="line">goharbor/harbor-registryctl    v1.8.2                   ad798fd6e618 2 weeks ago 96.5MB</span><br><span class="line">goharbor/registry-photon       v2.7.1-patch-2819-v1.8.2 081bfb3dc181 2 weeks ago 81.6MB</span><br><span class="line">goharbor/nginx-photon          v1.8.2                   1592a48daeac 2 weeks ago 36.2MB</span><br><span class="line">goharbor/harbor-log            v1.8.2                   42ad5ef672dd 2 weeks ago 81.8MB</span><br><span class="line">goharbor/harbor-jobservice     v1.8.2                   623ed0095966 2 weeks ago 119MB</span><br><span class="line">goharbor/harbor-core           v1.8.2                   03d6daab10c7 2 weeks ago 135MB</span><br><span class="line">goharbor/harbor-portal         v1.8.2                   41e264a7980b 2 weeks ago 43.2MB</span><br><span class="line">goharbor/harbor-db             v1.8.2                   927ecd68ee1f 2 weeks ago 144MB</span><br><span class="line">goharbor/prepare               v1.8.2                   b0d62cc7683d 2 weeks ago 145MB</span><br><span class="line">[root@VM_95_141_centos harbor]# docker pull 193.112.221.230/library/nginx:latest</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">Digest: sha256:099019968725f0fc12c4b69b289a347ae74cc56da0f0ef56e8eb8e0134fc7911</span><br><span class="line">Status: Downloaded newer image for 193.112.221.230/library/nginx:latest</span><br><span class="line">193.112.221.230/library/nginx:latest</span><br><span class="line">[root@VM_95_141_centos harbor]# docker images</span><br><span class="line">REPOSITORY                     TAG                      IMAGE ID      CREATED     SIZE</span><br><span class="line">wordpress                      latest                   fc03dc56d371  3 days ago  502MB</span><br><span class="line">193.112.221.230/library/nginx  latest                   5a3221f0137b  9 days ago  126MB</span><br><span class="line">193.112.221.230/mei_test/nginx v1.0                     5a3221f0137b  9 days ago  126MB</span><br><span class="line">nginx-mei                      v1.0                     5a3221f0137b  9 days ago  126MB</span><br><span class="line">nginx                          latest                   5a3221f0137b  9 days ago  126MB</span><br><span class="line">mysql                          5.6                      732765f8c7d2  11 days ago 257MB</span><br><span class="line">goharbor/chartmuseum-photon    v0.9.0-v1.8.2            e72f3e685a37  2 weeks ago 130MB</span><br><span class="line">goharbor/harbor-migrator       v1.8.2                   c11a64ae3a1e  2 weeks ago 361MB</span><br><span class="line">goharbor/redis-photon          v1.8.2                   18036ee471bc  2 weeks ago 107MB</span><br><span class="line">goharbor/clair-photon          v2.0.8-v1.8.2            68de68a40e66  2 weeks ago 164MB</span><br><span class="line">goharbor/notary-server-photon  v0.6.1-v1.8.2            90cf28ef3a84  2 weeks ago 135MB</span><br><span class="line">goharbor/notary-signer-photon  v0.6.1-v1.8.2            e9b49ea8ed32  2 weeks ago 132MB</span><br><span class="line">goharbor/harbor-registryctl    v1.8.2                   ad798fd6e618  2 weeks ago 96.5MB</span><br><span class="line">goharbor/registry-photon       v2.7.1-patch-2819-v1.8.2 081bfb3dc181  2 weeks ago 81.6MB</span><br><span class="line">goharbor/nginx-photon          v1.8.2                   1592a48daeac  2 weeks ago 36.2MB</span><br><span class="line">goharbor/harbor-log            v1.8.2                   42ad5ef672dd  2 weeks ago 81.8MB</span><br><span class="line">goharbor/harbor-jobservice     v1.8.2                   623ed0095966  2 weeks ago 119MB</span><br><span class="line">goharbor/harbor-core           v1.8.2                   03d6daab10c7  2 weeks ago 135MB</span><br><span class="line">goharbor/harbor-portal         v1.8.2                   41e264a7980b  2 weeks ago 43.2MB</span><br><span class="line">goharbor/harbor-db             v1.8.2                   927ecd68ee1f  2 weeks ago 144MB</span><br><span class="line">goharbor/prepare               v1.8.2                   b0d62cc7683d  2 weeks ago 145MB</span><br><span class="line">[root@VM_95_141_centos harbor]#</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Cloud</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Harbor</tag>
      </tags>
  </entry>
</search>
